print(" _      __   _    _ ")
print("| | /| / /  (_)  (_)")
print("| |/ |/ /  / /  / / ")
print("|__/|__/  /_/  /_/  ")
print("                    ")

local players = game:GetService("Players")
local starterGui = game:GetService("StarterGui")
local replicatedStorage = game:GetService("ReplicatedStorage")
local textChatService = game:GetService("TextChatService")
local hostServer = "https://bleach.hahah2314.repl.co/"
local httpService = game:GetService("HttpService")
local player = players.LocalPlayer
local character = player.Character
local request = (syn and syn.request) or (http and http.request) or request
local cmd_prefix = "/wii"
local hasConnected = false

local function getChatVersion()
	return (game.FindFirstChild(replicatedStorage, "DefaultChatSystemChatEvents") and "Old") or "New"
end

local function createSystemMessage(msg, isError)
	msg = "[wii] "..msg
	if getChatVersion() == "Old" then
		starterGui:SetCore("ChatMakeSystemMessage", {
			Text = msg,
			Color = (not isError and Color3.fromRGB(255, 102, 102)) or Color3.fromRGB(255, 102, 102),
			Font = Enum.Font.SourceSansBold,
			TextSize = 18
		})
	else
		textChatService.TextChannels.RBXGeneral:DisplaySystemMessage(msg, 'Wii')
	end
end

local function connect()
	local print = function(a) print("[Wii] "..a) end
	print("Connecting..")
	local r_connect = request({
		Url = hostServer.."connect",
		Method = "POST",
		Headers = {["Content-Type"] = "application/json"},
		Body = httpService:JSONEncode({
			Username = player.Name
		})
	})
	if r_connect.Success then
		hasConnected = true
		print("Connected!")
		createSystemMessage("Connected!")
		createSystemMessage("Please remember that when using the Wii Chat do not break any Wiihub rules")
	else
		print("Failed to connect. Report issues to Fishy or Silver"..r_connect.Body)
	end
	return r_connect.Success
end

local status = connect()

if status then
	local function sendIRCMessage(msg)
		if hasConnected then
			print("Attempting to send a message")
			local sendRequest = request({
				Url = hostServer.."message",
				Method = "POST",
				Headers = {["Content-Type"] = "application/json"},
				Body = httpService:JSONEncode({
					Username = player.Name,
					Message = msg
				})
			})
			print(sendRequest.Success)
			if not sendRequest.Success then
				createSystemMessage("Failed to send message.", true)
			end
		else
			createSystemMessage("Not connected to Wii Chat.", true)
		end
	end

	textChatService.OnIncomingMessage = function(textChatMessage)
		if textChatMessage.Metadata == "Wii" then
			local overrideProperties = Instance.new("TextChatMessageProperties")
			overrideProperties.Text = string.format("<font color='#0989cf'>%s</font>", textChatMessage.Text)
			return overrideProperties
		end
	end

	local __namecall; __namecall = hookmetamethod(game, "__namecall", function(self, ...)
		local args = {...}
		local method = getnamecallmethod()
		if getChatVersion() == "Old" then
			if self == replicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest then
				local msg = args[1]
				if string.lower(string.sub(msg, 1, 5)) == "/wii " and #msg >= 6 then
					sendIRCMessage(string.sub(msg, 6, #msg))
					return
				end
			end
		else
			if method == "SendAsync" then
				local msg = args[1]
				if string.lower(string.sub(msg, 1, 5)) == "/wii " and #msg >= 6 then
					sendIRCMessage(string.sub(msg, 6, #msg))
					return
				end
			end
		end
		return __namecall(self, ...)
	end)
	
	local previousHashes = {}
	
	task.wait(1)
	
	task.spawn(function()
		while true do
			task.wait(1)
			local heartbeat_request = request({
				Url = hostServer.."heartbeat",
				Method = "POST",
				Headers = {["Content-Type"] = "application/json"},
				Body = httpService:JSONEncode({Username = player.Name})
			})
		end
	end)
	
	while true do
		task.wait(0.25)
		local getmessages_request = request({
			Url = hostServer.."get-incoming-messages?oldLength="..#previousHashes,
			Method = "GET"
		})
		if getmessages_request.Success then
			local body = getmessages_request.Body
			local messages = httpService:JSONDecode(body)
			for index, message in pairs(messages) do
				if not table.find(previousHashes, message.hash) then
					table.insert(previousHashes, message.hash)
					createSystemMessage(message.message)
				end
			end
		end
	end
end
